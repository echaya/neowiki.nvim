*neowiki.nvim*

MIT License Copyright (c) 2025 echaya

==============================================================================

CONTENTS                                      *neowiki-contents*

1. Introduction...............................|neowiki-introduction|
2. Features...................................|neowiki-features|
3. Installation...............................|neowiki-installation|
4. External Dependencies......................|neowiki-dependencies|
5. Setup......................................|neowiki-setup|
6. Configuration..............................|neowiki-configuration|
7. Mappings...................................|neowiki-mappings|
8. API........................................|neowiki-api|
==============================================================================

1. Introduction                               *neowiki-introduction*

neowiki.nvim is a lightweight, first-class Neovim citizen with Lua finesse,
offering a minimal, intuitive workflow out of the box for note-taking and
Getting Things Done (GTD).
==============================================================================

2. Features                                   *neowiki-features*

- _Flexible Wiki Opening_
  Open wikis your way — in the current buffer, a new tab, or a sleek floating
  window for distraction-free note-taking.

- _Seamless Linking & Page Navigation_
  Create and follow markdown links with <CR>, split with <S-CR> or <C-CR>.
  Jump between links with <Tab>/<S-Tab> and jump to the wiki index with
  <Backspace>.

- _Browse History_
  Navigate back and forth through your visited pages like a web browser using
  [[ and ]].

- _Smart GTD_
  Toggle tasks with <leader>wt ([ ] to [x]), and see nested progress percentages
  updated in real-time.

- _Multi-Wiki & Nested Root Support_
  Manage multiple wikis (e.g., work, personal) and automatically discover
  nested `index.md` files with ease by enabling `discover_nested_roots`.

- _Advanced Wiki Management_
  Rename or delete the current page—or the page under the cursor's link—with
  <leader>wr and <leader>wd, which automatically updates all backlinks.
  Find and insert links with <leader>wi and clean up broken links with
  <leader>wc.

- _Neovim Native_
  Harness Neovim 0.10+ with Lua speed, integrating seamlessly with
  Treesitter, markdown rendering, completion, pickers, and your setup out of
  the box.
==============================================================================

3. Installation                               *neowiki-installation*

This plugin requires Neovim >= 0.10.

Using lazy.nvim:
>lua
{
  "echaya/neowiki.nvim",
  opts = {
    wiki_dirs = {
      -- neowiki.nvim supports both absolute and tilde-expanded paths
      { name = "Work", path = "~/work/wiki" },
      { name = "Personal", path = "personal/wiki" },
    },
  },
  keys = {
    { "<leader>ww", "<cmd>lua require('neowiki').open_wiki()<cr>", desc = "Open Wiki" },
    { "<leader>wW", "<cmd>lua require('neowiki').open_wiki_floating()<cr>", desc = "Open Wiki in Floating Window" },
    { "<leader>wT", "<cmd>lua require('neowiki').open_wiki_new_tab()<cr>", desc = "Open Wiki in Tab" },
  },
}
<
Using Mini.deps:
>lua
require("mini.deps").add("echaya/neowiki.nvim")
require("neowiki").setup()
vim.keymap.set("n", "<leader>ww", require("neowiki").open_wiki, { desc = "Open Wiki" })
vim.keymap.set("n", "<leader>wW", require("neowiki").open_wiki_floating, { desc = "Open Floating Wiki" })
vim.keymap.set("n", "<leader>wT", require("neowiki").open_wiki_new_tab, { desc = "Open Wiki in Tab" })
<
Using Vim-Plug:
>lua
Plug 'echaya/neowiki.nvim'
lua require('neowiki').setup()
lua vim.keymap.set("n", "<leader>ww", require("neowiki").open_wiki, { desc = "Open Wiki" })
lua vim.keymap.set("n", "<leader>wW", require("neowiki").open_wiki_floating, { desc = "Open Floating Wiki" })
lua vim.keymap.set("n", "<leader>wT", require("neowiki").open_wiki_new_tab, { desc = "Open Wiki in Tab" })
<
==============================================================================

4. External Dependencies                      *neowiki-dependencies*

neowiki.nvim is designed to be fast and efficient by leveraging modern
command-line tools for file searching. While these dependencies are optional,
installing them is highly recommended for the best performance and to enable
all features. If none of the following tools are found in your PATH,
neowiki.nvim will automatically use a slower, native Lua-based search method
to get the job done.

- ***ripgrep*** (`rg`)
  The primary and fastest search tool used by the plugin. It is **required**
  for the global backlink search feature used when **renaming or deleting
  pages**. Without `rg`, backlink updates will fall back to searching only
  within a limited scope (such as the parent wiki's index file). It is also
  the first choice for finding wiki pages for insertion and detecting nested
  wiki structures.

- ***fd***
  A fast and simple alternative for finding files. It is used as the second
  choice if `rg` is not available. Its responsibilities include listing wiki
  pages for insertion and detecting nested wiki structures.

- ***git***
  If `rg` and `fd` are not found, neowiki.nvim can use `git ls-files` to find
  files within a git repository, which is still very fast. It is used as the
  third choice for listing wiki pages for insertion and detecting nested
  wiki structures.
==============================================================================

5. Setup                                      *neowiki-setup*

If you are not using a plugin manager that supports the `opts` table (like
lazy.nvim), you must call the `setup()` function manually.
>lua
  require('neowiki').setup({
    -- Your configuration options go here.
    -- See |neowiki-configuration| for all available settings.
  })
<

==============================================================================

6. Configuration                              *neowiki-configuration*

The `setup` function accepts a table to customize the plugin's behavior. Below
are the default settings. You only need to pass the options you wish
to override.

Default values:
>lua
require("neowiki").setup({
  -- A list of tables, where each table defines a wiki.
  -- Defaults to `~/wiki` if nil.
  wiki_dirs = nil,

  -- The filename for a wiki's index page.
  index_file = "index.md",

  -- Automatically discover and register nested wiki roots.
  discover_nested_roots = false,

  -- Defines the keymaps used by neowiki.
  keymaps = {
    action_link = "<CR>",
    action_link_vsplit = "<S-CR>",
    action_link_split = "<C-CR>",

    next_link = "<Tab>",
    prev_link = "<S-Tab>",
    navigate_back = "[[",
    navigate_forward = "]]",
    jump_to_index = "<Backspace>",

    delete_page = "<leader>wd",
    cleanup_links = "<leader>wc",
    insert_link = "<leader>wi",
    rename_page = "<leader>wr",

    toggle_task = "<leader>wt",

    close_float = "q",
  },

  -- Configuration for the GTD functionality.
  gtd = {
    show_gtd_progress = true, -- Show task progress percentages
    gtd_progress_hl_group = "Comment", -- Highlight group for progress text
  },

  -- Configuration for opening wiki in floating window.
  floating_wiki = {
    -- Config for nvim_open_win(). Defines the window's structure,
    -- position, and border.
    open = {
      relative = "editor",
      width = 0.9,
      height = 0.9,
      border = "rounded",
    },

    -- Options for nvim_win_set_option(). Defines the style
    -- within the window after it's created.
    style = {},
  },
})
<

==============================================================================

7. Mappings                                   *neowiki-mappings*

Default Key Mappings
--------------------
The following logical actions are mapped by default. You can change the key
for any action in the `keymaps` table of your setup configuration.
It is important to note that these keymaps are buffer-local; they will only be
active in markdown files that are located within a configured wiki
directory.

| Mode     | Key binding       | Action Description                  |
| -------- | ----------------- | ----------------------------------- |
| Normal   | `<CR>`            | Follow link under cursor            |
| Visual   | `<CR>`            | Create link from selection          |
| Normal   | `<S-CR>`          | Follow link in a vertical split     |
| Visual   | `<S-CR>`          | Create link, open in vsplit         |
| Normal   | `<C-CR>`          | Follow link in a horizontal split   |
| Visual   | `<C-CR>`          | Create link, open in split          |
| Normal   | `<Tab>`           | Jump to the next link in buffer     |
| Normal   | `<S-Tab>`         | Jump to the previous link           |
| Normal   | `[[`              | Navigate back in history            |
| Normal   | `]]`              | Navigate forward in history         |
| Normal   | `<Backspace>`     | Jump to the current wiki's index    |
| Normal   | `<leader>wt`      | Toggle task status on current line  |
| Visual   | `<leader>wt`      | Toggle task status for selection    |
| Normal   | `<leader>wd`      | Delete current or linked page       |
| Normal   | `<leader>wc`      | Clean up broken links in file       |
| Normal   | `<leader>wi`      | Find and insert a link to a page    |
| Normal   | `<leader>wr`      | Rename current or linked page       |
| Normal   | `q`               | Close the floating window           |
==============================================================================

8. API                                        *neowiki-api*

The following functions are exposed in the main `neowiki` module and can be
used for custom mappings or scripts.
------------------------------------------------------------------------------
*neowiki.open_wiki({name})*

Opens the index page of a wiki.

- If multiple wikis are defined in `wiki_dirs` and `{name}` is `nil`, it
  will display a `vim.ui.select` prompt to choose a wiki.
- If `{name}` (string) is provided, it will attempt to open the wiki with the
  matching name from your configuration.
- If only a single wiki is configured, it will open it directly.

Usage:
>lua
  -- Mapped to a key, will prompt if needed
  vim.keymap.set('n', '<leader>ww', "<cmd>lua require('neowiki').open_wiki()<cr>")

  -- Open a specific wiki directly
  vim.keymap.set('n', '<leader>wp', "<cmd>lua require('neowiki').open_wiki('personal')<cr>")
<

------------------------------------------------------------------------------
*neowiki.open_wiki_new_tab({name})*

Same as |neowiki.open_wiki()|, but opens the wiki's index page in a new
tab.

Usage:
>lua
  vim.keymap.set('n', '<leader>wT', "<cmd>lua require('neowiki').open_wiki_new_tab()<cr>")
<

------------------------------------------------------------------------------
*neowiki.open_wiki_floating({name})*

Same as |neowiki.open_wiki()|, but opens the wiki's index page in a
floating window.

Usage:
>lua
  vim.keymap.set('n', '<leader>wW', "<cmd>lua require('neowiki').open_wiki_floating()<cr>")
<

vim:tw=78:ts=8:noet:ft=help:norl:
